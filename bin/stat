#!/usr/bin/env perl
use strict;
use warnings;
use 5.010;
BEGIN {
   # LETO IS MY HERO
   use Cwd qw{abs_path};
   my ($lib) = abs_path(__FILE__) =~ m{(.*)stat$};
   $lib =~ s{bin/?$}{lib};
   push @INC, $lib
};

use List::Util qw{min max};
use Scalar::Util qw{looks_like_number};
use BenchTools;

# what are we to be doing (overview | report)
my $cmd = (defined $ARGV[0] && main->can($ARGV[0])) ? shift @ARGV : 'overview' ;
main->$cmd;

sub overview {
   my $total_solutions = scalar(keys %{problems_hash()});
   my $fmt = join ' ', '%8s', map{sprintf q{%%%ds}, length($_)} languages;
   $fmt.="\n";
printf $fmt, ' ', languages;
printf $fmt, '+1 solve', map{ my $L = $_;
                              scalar( grep{$_>1} map{scalar(keys %$_) } values %{ solutions->{$L} } )
                            } languages;
printf $fmt, 'done in',  map{sprintf q{%d/%d}, scalar( keys %{ solutions->{$_}}), $total_solutions } languages;
}

sub report {
   my $fmt = join ' ', '%4s', map{sprintf q{%%%ds}, length($_)} languages;
   $fmt.="\n";
   printf $fmt, ' ', languages;
   for my $prob ( sort keys %{ problems_hash() } ) {
      printf $fmt, $prob, map{($_ eq '0')? '-' : $_ }
                          map{ scalar( keys %{ solutions->{$_}->{$prob} })
                             } languages;
   }
}

